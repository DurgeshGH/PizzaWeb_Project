@using Microsoft.AspNetCore.Identity

@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager

<ul class="navbar-nav">
@if (SignInManager.IsSignedIn(User))
{
    <li class="nav-item">
            <a id="manage" class="nav-link" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">Hello @GetUserNameOnly(User.Identity.Name)!</a>
    </li>
    <li class="nav-item">
        <form id="logoutForm" class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
            <button id="logout" type="submit" class="nav-link btn btn-link border-0">Logout</button>
        </form>
    </li>
}
else
{
    <li class="nav-item">
        <a class="nav-link" id="register" asp-area="Identity" asp-page="/Account/Register">Register</a>
    </li>
    <li class="nav-item">
        <a class="nav-link" id="login" asp-area="Identity" asp-page="/Account/Login">Login</a>
    </li>
}
</ul>





@section Scripts {
    <script>

        @functions {
        public string GetUserNameOnly(string fullUserName)
        {
            // Get the full user name (which might contain email address)
            var userName = UserManager.GetUserName(User);

            // Check if "@" exists in the user name
            var atIndex = userName.IndexOf('@');

            // If "@" exists, return only the substring before it
            if (atIndex != -1)
            {
                return userName.Substring(0, atIndex);
            }
            else
            {
                // If "@" doesn't exist, return the full username
                return userName;
            }
        }
    }



    </script>
}
